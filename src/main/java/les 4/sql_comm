
--    len       interval hour to minute

DROP TABLE IF EXISTS films;

CREATE TABLE films(
	id BIGSERIAL NOT NULL PRIMARY KEY,
	title varchar(50) NOT NULL,
	len interval hour to minute NOT NULL
);


CREATE TABLE sessions(
	id BIGSERIAL NOT NULL PRIMARY KEY,
	films_id BIGINT REFERENCES films(id),
	start_time timestamp(0) NOT NULL,
	price int NOT NULL
);

CREATE TABLE tickets(
    id BIGSERIAL NOT NULL PRIMARY KEY,
    sessions_id BIGINT REFERENCES sessions(id)
);

INSERT INTO films (title, len) VALUES ('film1', '100');
INSERT INTO films (title, len) VALUES ('film2', '120');
INSERT INTO films (title, len) VALUES ('film3', '150');
INSERT INTO films (title, len) VALUES ('film4', '180');

INSERT INTO sessions (films_id, start_time, price) VALUES ('1', '2022-10-21 10:00:00', '10');
INSERT INTO sessions (films_id, start_time, price) VALUES ('2', '2022-10-21 12:00:00', '12');
INSERT INTO sessions (films_id, start_time, price) VALUES ('3', '2022-10-21 14:30:00', '13');
INSERT INTO sessions (films_id, start_time, price) VALUES ('4', '2022-10-21 16:30:00', '14');
INSERT INTO sessions (films_id, start_time, price) VALUES ('1', '2022-10-21 20:00:00', '12');
INSERT INTO sessions (films_id, start_time, price) VALUES ('2', '2022-10-21 21:50:00', '15');

INSERT INTO tickets (sessions_id) VALUES ('1');
INSERT INTO tickets (sessions_id) VALUES ('5');
INSERT INTO tickets (sessions_id) VALUES ('5');
INSERT INTO tickets (sessions_id) VALUES ('6');
INSERT INTO tickets (sessions_id) VALUES ('6');
INSERT INTO tickets (sessions_id) VALUES ('6');
INSERT INTO tickets (sessions_id) VALUES ('7');
INSERT INTO tickets (sessions_id) VALUES ('7');
INSERT INTO tickets (sessions_id) VALUES ('7');
INSERT INTO tickets (sessions_id) VALUES ('7');
INSERT INTO tickets (sessions_id) VALUES ('8');
INSERT INTO tickets (sessions_id) VALUES ('8');
INSERT INTO tickets (sessions_id) VALUES ('8');
INSERT INTO tickets (sessions_id) VALUES ('9');
INSERT INTO tickets (sessions_id) VALUES ('9');


--    ошибки в расписании (фильмы накладываются друг на друга), отсортированные по возрастанию времени. Выводить надо колонки
--   «фильм 1», «время начала», «длительность», «фильм 2», «время начала», «длительность»;

--SELECT * FROM (sessions)
--WHERE EXTRACT(year FROM (start_time)) = 2015;

--    перерывы 30 минут и более между фильмами — выводить по уменьшению длительности перерыва. Колонки «фильм 1»,
-- «время начала», «длительность», «время начала второго фильма», «длительность перерыва»;



--    список фильмов, для каждого — с указанием общего числа посетителей за все время, среднего числа зрителей за сеанс
-- и общей суммы сборов по каждому фильму (отсортировать по убыванию прибыли). Внизу таблицы должна быть строчка «итого»,
-- содержащая данные по всем фильмам сразу;

SELECT films.title, count(*) as number_of_spectators
from films
join sessions on films.id = sessions.films_id
join tickets on sessions.id = tickets.sessions_id
GROUP BY films.title
;

--    число посетителей и кассовые сборы, сгруппированные по времени начала фильма:
-- с 9 до 15, с 15 до 18, с 18 до 21, с 21 до 00:00 (сколько посетителей пришло с 9 до 15 часов и т.д.).
